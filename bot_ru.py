import asyncio
import os
import openai
import dotenv
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
#from aiogram.utils.markdown import escape_md
from db import Database
import subprocess
from pathlib import Path
from datetime import datetime

dotenv.load_dotenv()

db = Database()
bot_settings = db.execute('SELECT * FROM administration_bot WHERE name="@GSGRY_bot"')
api_token = db.execute('SELECT * FROM settings_bot')



bot = Bot(token=bot_settings[0][4], default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

print(api_token)
client = openai.OpenAI(api_key=api_token[0][1])
ASSISTANT_ID = db.execute('SELECT assistant_token FROM administration_bot WHERE name="@GSGRY_bot"')[0][0]

if not ASSISTANT_ID:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RU_ASSISTANT –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

user_threads = {}

class RegistrationStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_phone = State()
    waiting_for_company = State()

async def delete_webhook(bot: Bot):
    await bot.delete_webhook(drop_pending_updates=True)


async def convert_voice_to_text(file_id):
    ogg_file = f"temp_{file_id}.ogg"
    mp3_file = f"temp_{file_id}.mp3"

    file = await bot.get_file(file_id)
    downloaded_file = await bot.download_file(file.file_path)

    with open(ogg_file, 'wb') as f:
        f.write(downloaded_file.read())

    subprocess.run(['ffmpeg', '-y', '-i', ogg_file, '-acodec', 'libmp3lame', '-q:a', '2', mp3_file], check=True)

    with open(mp3_file, 'rb') as audio_file:
        transcript = client.audio.transcriptions.create(model="whisper-1", file=audio_file, language="ru")

    Path(ogg_file).unlink(missing_ok=True)
    Path(mp3_file).unlink(missing_ok=True)

    return transcript.text

async def wait_until_run_completed(thread_id, run_id):
    """–ñ–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run-–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –±–µ–∑ —Ç–∞–π–º-–∞—É—Ç–∞ (–ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏–ª–∏ –Ω–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞)."""
    while True:
        run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_id)
        if run_status.status == 'completed':
            return True
        elif run_status.status in ('failed', 'cancelled', 'expired'):
            return False
        await asyncio.sleep(2)


def get_user_thread(user_id):
    if user_id not in user_threads:
        thread = client.beta.threads.create()
        user_threads[user_id] = thread.id
    return user_threads[user_id]


async def send_message_to_assistant(message: Message, user_id: int, prompt: str, file=None):
    thread_id = user_threads.get(user_id)
    if not thread_id:
        thread = client.beta.threads.create()
        thread_id = thread.id
        user_threads[user_id] = thread_id

    msg_data = {"role": "user", "content": prompt}
    if file:
        msg_data["file_ids"] = [file.id]

    client.beta.threads.messages.create(thread_id=thread_id, **msg_data)

    run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=ASSISTANT_ID, instructions=prompt)

    if not await wait_until_run_completed(thread_id, run.id):
        await message.reply("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    messages = client.beta.threads.messages.list(thread_id=thread_id)
    await message.reply(messages)
    for msg in reversed(messages.data):
        print(msg)
        if msg.role == 'assistant':
            print(msg)
            if msg.file_ids:
                for file_id in msg.file_ids:
                    file_info = client.files.retrieve(file_id)
                    file_content = client.files.content(file_id).read()

                    telegram_file = BufferedInputFile(file_content, filename=file_info.filename or "file.txt")
                    await message.answer_document(telegram_file, caption="üìé –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            else:
                full_text = "\n".join(part.text.value for part in msg.content if hasattr(part, "text"))
                await message.answer(full_text)
            break
    else:
        await message.reply("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞.")



@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    user_request = db.execute('SELECT * FROM user_request WHERE user_id = ? AND status = "approved"', (user_id,))
    
    if user_request:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    
    pending_request = db.execute('SELECT * FROM user_request WHERE user_id = ? AND status = "pending"', (user_id,))
    
    if pending_request:
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return
    
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(RegistrationStates.waiting_for_full_name)

@dp.message(RegistrationStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text
    await state.update_data(full_name=full_name)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)
    await state.set_state(RegistrationStates.waiting_for_phone)

@dp.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegistrationStates.waiting_for_company)

@dp.message(RegistrationStates.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

@dp.message(RegistrationStates.waiting_for_company)
async def process_company(message: Message, state: FSMContext):
    data = await state.get_data()
    full_name = data.get('full_name')
    phone = data.get('phone')
    company_info = message.text if message.text else None
    
    company = None
    position = None
    if company_info:
        parts = company_info.split(',')
        company = parts[0].strip()
        if len(parts) > 1:
            position = parts[1].strip()
    
    db.execute(
        'INSERT INTO user_request (user_id, full_name, phone, company, position, status, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)',
        (message.from_user.id, full_name, phone, company, position, 'pending', datetime.now())
    )
    text = """
üìù –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
‚è≥ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç.
ü§ñ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏ –≤—ã —Å—Ä–∞–∑—É —Å–º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ê–≥–∞—Ç–æ–π ‚Äî –Ω–∞—à–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.

"""
    await message.answer(text)
    await state.clear()


@dp.message(F.content_type.in_({'voice'}))
async def handle_voice(message: Message):
    user_id = message.from_user.id
    user_request = db.execute('SELECT * FROM user_request WHERE user_id = ? AND status = "approved"', (user_id,))

    if not user_request:
        await message.answer("–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    try:
        text_content = await convert_voice_to_text(message.voice.file_id)
 #       await message.reply(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—Å—Ç: {text_content}")
        await send_message_to_assistant(message, user_id, text_content)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")


@dp.message(F.content_type.in_({'document', 'photo'}))
async def handle_files(message: Message):
    user_id = message.from_user.id
    
    user_request = db.execute('SELECT * FROM user_request WHERE user_id = ? AND status = "approved"', (user_id,))
    if not user_request:
        await message.answer("–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    
    try:
        if user_id not in user_threads:
            thread = client.beta.threads.create()
            user_threads[user_id] = thread.id
        thread_id = user_threads[user_id]
        
        file_ids = []
        temp_files = []  
        
        if message.document:
            allowed_mime_types = [
                'application/pdf', 
                'text/plain',
                'application/msword',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/vnd.ms-excel',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'application/vnd.ms-powerpoint',
                'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            ]
            
            if message.document.mime_type not in allowed_mime_types:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF, Word, Excel –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
                return
                
            file = await bot.get_file(message.document.file_id)
            downloaded_file = await bot.download_file(file.file_path)
            
            temp_file = f"temp_{message.document.file_id}"
            with open(temp_file, 'wb') as f:
                f.write(downloaded_file.read())
            
            with open(temp_file, 'rb') as f:
                uploaded_file = client.files.create(file=f, purpose='assistants')
            os.remove(temp_file)
            
        elif message.photo:
            photo = message.photo[-1] 
            file = await bot.get_file(photo.file_id)
            downloaded_file = await bot.download_file(file.file_path)
            
            temp_file = f"temp_{photo.file_id}.jpg"
            with open(temp_file, 'wb') as f:
                f.write(downloaded_file.read())
            
            with open(temp_file, 'rb') as f:
                uploaded_file = client.files.create(file=f, purpose='assistants')

            os.remove(temp_file)
        await send_message_to_assistant(message, user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª", uploaded_file)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await message.reply(f'{e}')
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    
    user_request = db.execute('SELECT * FROM user_request WHERE user_id = ? AND status = "approved"', (user_id,))
    
    if not user_request:
        await message.answer("–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    
    try:
        if user_id not in user_threads:
            thread = client.beta.threads.create()
            user_threads[user_id] = thread.id

        thread_id = user_threads[user_id]

        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message.text
        )
        prompt = db.execute('SELECT prompt FROM administration_bot WHERE name="@GSGRY_bot"')[0][0]
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID,
            instructions=prompt
        )

        if not await wait_until_run_completed(thread_id, run.id):
            await message.reply("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
            return

        messages = client.beta.threads.messages.list(thread_id=thread_id)
        if not messages.data:
            await message.reply("–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
            return

        assistant_messages = sorted(
            [msg for msg in messages.data if msg.role == 'assistant'],
            key=lambda msg: msg.created_at,
            reverse=True  
        )

        if assistant_messages:
            latest_message = assistant_messages[0]
            if hasattr(latest_message.content[0], 'text'):
                response_text = latest_message.content[0].text.value
                await message.reply(response_text)
            else:
                await message.reply("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        else:
            await message.reply("–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")

    except Exception as e:
        await message.reply(f"{e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

        
async def main():
    await delete_webhook(bot)
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())



